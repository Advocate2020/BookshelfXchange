

<EditForm method="post" Model="BookModel" FormName="addBook">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group mb-3">
        <label for="title" class="form-label">Book title</label>
        <InputText @bind-Value="BookModel.Title" id="title" class="form-control" />
        <ValidationMessage For="() => BookModel.Title" class="text-danger" />
    </div>
    <div class="form-group mb-3">
        <label for="author" class="form-label">Book author</label>
        <InputText @bind-Value="BookModel.Author" id="author" class="form-control" />
        <ValidationMessage For="() => BookModel.Author" class="text-danger" />
    </div>
    <div class="form-group mb-3">
        <label for="category" class="form-label">Book category</label>
        <InputSelect id="category" @bind-Value="BookModel.CategoryId" class="form-control form-select">
            @if (BookCategories is null)
            {
                <option selected value=""></option>
            }
            else
            {
                <option selected value="">Select Category</option>
                @foreach (var category in BookCategories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="() => BookModel.CategoryId" class="text-danger" />
    </div>
    <div class="form-group text-left">
        <button type="submit" class="btn-process" style=" background-color: rgb(49, 35, 61);
        border-radius: 10px;
        color: white;
        width: 30%;
        cursor: pointer;
        ">
            Add
        </button>
    </div>
</EditForm>

@code {
    @using BookshelfXchange.ViewModels.Add;
    @using BookshelfXchange.ViewModels.GET;
    @using BookshelfXchange.Repository;

    [Parameter]
    public EventCallback<AddBookViewModel> OnValidBookSubmit { get; set; }

    [Parameter]
    public bool IsEditMode { get; set; } = false;

    [Parameter]
    public int BookId { get; set; }

    [SupplyParameterFromForm]
    public AddBookViewModel? BookModel { get; set; }
    private List<GetCategoryViewModel>? BookCategories;

    private string ButtonLabel => IsEditMode ? $"Edit Book" : "Add New Book";

    int selectedCategoryID;

    [Inject]
    private IBaseRepository<AddBookViewModel> GetBookRepository { get; set; }

    [Inject]
    private IBaseRepository<GetCategoryViewModel> CategoryRepository { get; set; }

    int SelectedCategoryID
    {
        get => selectedCategoryID;
        set { selectedCategoryID = value; }
    }



    protected override async Task OnInitializedAsync()
    {
        try
        {
            BookCategories = await CategoryRepository.GetAllAsync("api/Category");

            if (IsEditMode)
            {
                BookModel = await GetBookRepository.GetByIdAsync(BookId, "api/Book");

            }
            else
            {
                BookModel = new();
            }



        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error occurred while fetching books and categories: {ex.Message}");
        }

    }

    private async Task CreateOrEdit()
    {
        await OnValidBookSubmit.InvokeAsync(BookModel);
    }


}
